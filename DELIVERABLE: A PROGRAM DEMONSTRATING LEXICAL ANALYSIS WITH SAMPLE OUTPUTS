#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// List of keywords
const char* keywords[] = {
    "int", "float", "char", "if", "else", "for", "while", "return", "void", "main"
};
int numKeywords = sizeof(keywords) / sizeof(keywords[0]);

// Function to check if a word is a keyword
int isKeyword(const char* word) {
    for (int i = 0; i < numKeywords; i++) {
        if (strcmp(word, keywords[i]) == 0)
            return 1;
    }
    return 0;
}

// Function to check if character is operator
int isOperator(char ch) {
    char ops[] = "+-*/=<>!&|%";
    for (int i = 0; ops[i]; i++) {
        if (ch == ops[i])
            return 1;
    }
    return 0;
}

// Lexical analyzer logic
void lexicalAnalyze(FILE* file) {
    char ch, word[100];
    int i = 0;

    printf("\nðŸ“„ Lexical Analysis Output:\n");

    while ((ch = fgetc(file)) != EOF) {
        // Skip whitespace
        if (isspace(ch))
            continue;

        // Word: identifier or keyword
        if (isalpha(ch) || ch == '_') {
            word[i++] = ch;
            while (isalnum(ch = fgetc(file)) || ch == '_')
                word[i++] = ch;
            word[i] = '\0';
            i = 0;
            ungetc(ch, file);

            if (isKeyword(word))
                printf("Keyword     : %s\n", word);
            else
                printf("Identifier  : %s\n", word);
        }

        // Number (basic integer)
        else if (isdigit(ch)) {
            word[i++] = ch;
            while (isdigit(ch = fgetc(file)))
                word[i++] = ch;
            word[i] = '\0';
            i = 0;
            ungetc(ch, file);

            printf("Number      : %s\n", word);
        }

        // Operator
        else if (isOperator(ch)) {
            printf("Operator    : %c\n", ch);
        }

        // Punctuation (e.g., ; , { })
        else if (ch == ';' || ch == ',' || ch == '(' || ch == ')' || ch == '{' || ch == '}') {
            printf("Symbol      : %c\n", ch);
        }

        // Others (skip)
        else {
            // printf("Unknown     : %c\n", ch);
        }
    }
}
